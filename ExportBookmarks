from __future__ import print_function
import argparse
import io
from json import loads
import os
from os.path import expanduser
from platform import system
from re import match
from sys import argv, stderr


def Export(input_file, output_file,writetype):
    script_version = "2.0.2"

    # html escaping code from http://wiki.python.org/moin/EscapingHtml

    html_escape_table = {
        "&": "&amp;",
        '"': "&quot;",
        "'": "&#39;",
        ">": "&gt;",
        "<": "&lt;",
    }

    output_file_template = """<!DOCTYPE NETSCAPE-Bookmark-file-1>
    
    <meta http-equiv='Content-Type' content='text/html; charset=UTF-8' />
    <title>Bookmarks</title>
    <h1>Bookmarks</h1>
    
    <dl><p>
    
    <dl>{bookmark_bar}</dl>
    
    <dl>{other}</dl>
    """

    def html_escape(text):
        return ''.join(html_escape_table.get(c, c) for c in text)

    def sanitize(string):
        res = ''
        string = html_escape(string)

        for i in range(len(string)):
            if ord(string[i]) > 127:
                res += '&#x{:x};'.format(ord(string[i]))
            else:
                res += string[i]

        return res

    def html_for_node(node):
        if 'url' in node:
            return html_for_url_node(node)
        elif 'children' in node:
            return html_for_parent_node(node)
        else:
            return ''

    def html_for_url_node(node):
        if not match("javascript:", node['url']):
            return '<dt><a href="{}">{}</a>\n'.format(sanitize(node['url']), sanitize(node['name']))
        else:
            return ''

    def html_for_parent_node(node):
        return '<dt><h3>{}</h3>\n<dl><p>{}</dl><p>\n'.format(sanitize(node['name']),
                                                             ''.join([html_for_node(n) for n in node['children']]))

    input_file = io.open(input_file, 'r', encoding='utf-8')
    contents = loads(input_file.read())
    input_file.close()

    bookmark_bar = html_for_node(contents['roots']['bookmark_bar'])
    other = html_for_node(contents['roots']['other'])

    output_file = open(output_file, writetype)
    output_file.write(output_file_template.format(bookmark_bar=bookmark_bar, other=other))
    output_file.close()


if __name__ == "__main__":
    edge_db_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Microsoft", "Edge", "User Data",
                                "default", "Bookmarks")
    chrome_db_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data",
                                  "default", "Bookmarks")

    Export(edge_db_path, "Bookmarks.html" , "w+")
    Export(chrome_db_path, "Bookmarks.html" , "a+")

"""
if system() == Darwin:
input_filename = expanduser(~/Library/Application Support/Google/Chrome/Default/Bookmarks)
elif system() == Linux:
input_filename = expanduser(~/.config/google-chrome/Default/Bookmarks)
elif system() == Windows:
input_filename = environ[LOCALAPPDATA] + Google Chrome  User Data  Default Bookmarks
else:
print(Your system is not recognized. Please specify the input file manually.)
"""
